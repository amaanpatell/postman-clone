generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id
  name            String
  email           String
  emailVerified   Boolean           @default(false)
  image           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  sessions        Session[]
  accounts        Account[]
  WorkspaceMember WorkspaceMember[]

  workspaces Workspace[] @relation("UserWorkspaces")

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// Workspace and members

model Workspace {
  id          String  @id @default(cuid())
  name        String
  description String?
  ownerId     String
  owner       User    @relation("UserWorkspaces", fields: [ownerId], references: [id])

  members     WorkspaceMember[]
  collections Collection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([name, ownerId])
}

enum MEMBER_ROLE {
  ADMIN
  EDITOR
  VIEWER
}

model WorkspaceMember {
  id   String      @id @default(cuid())
  role MEMBER_ROLE @default(ADMIN)

  userId      String
  workspaceId String

  user      User      @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, workspaceId])
}

model Collection {
  id   String @id @default(cuid())
  name String

  workspaceId String

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  requests  Request[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum REST_METHOD {
  GET
  POST
  PUT
  PATCH
  DELETE
}

model Request {
  id         String      @id @default(cuid())
  name       String
  method     REST_METHOD @default(GET)
  url        String
  parameters Json?
  headers    Json?

  body     Json?
  response Json?

  collectionId String
  collection   Collection   @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  runs         RequestRun[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model RequestRun {
  id String @id @default(cuid())

  requestId String
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  status     Int
  statusText String?
  headers    Json?
  body       String? // raw text or JSON string
  durationMs Int?

  createdAt DateTime @default(now())
}
